// <auto-generated />
using System;
using CoinverseSocialAPI.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoinverseSocialAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240724234507_AddedLikesAndTypeLikes")]
    partial class AddedLikesAndTypeLikes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.30")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("CoinverseSocialAPI.Models.Comment", b =>
                {
                    b.Property<int>("PkComment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkComment"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkPost")
                        .HasColumnType("int");

                    b.Property<int?>("FkUser")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PkComment");

                    b.HasIndex("FkPost");

                    b.HasIndex("FkUser");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.cTypeLike", b =>
                {
                    b.Property<int>("PkTypeLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkTypeLike"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("PkTypeLike");

                    b.ToTable("cTypeLike");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.cTypePost", b =>
                {
                    b.Property<int>("PkTypePost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkTypePost"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("PkTypePost");

                    b.ToTable("cTypePost");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Follower", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("FkFollower")
                        .HasColumnType("int");

                    b.Property<int>("FkUser")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FollowDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FkFollower");

                    b.HasIndex("FkUser");

                    b.ToTable("Followers");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Like", b =>
                {
                    b.Property<int>("PkLike")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkLike"), 1L, 1);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkPost")
                        .HasColumnType("int");

                    b.Property<int>("FkTypeLike")
                        .HasColumnType("int");

                    b.Property<int>("FkUser")
                        .HasColumnType("int");

                    b.HasKey("PkLike");

                    b.HasIndex("FkPost");

                    b.HasIndex("FkTypeLike");

                    b.HasIndex("FkUser");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Post", b =>
                {
                    b.Property<int>("PkPost")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkPost"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("FkTypePost")
                        .HasColumnType("int");

                    b.Property<int?>("FkUser")
                        .HasColumnType("int");

                    b.Property<int?>("IdPostShared")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("text");

                    b.HasKey("PkPost");

                    b.HasIndex("FkTypePost");

                    b.HasIndex("FkUser");

                    b.HasIndex("IdPostShared");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.UserModel", b =>
                {
                    b.Property<int>("PkUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PkUser"), 1L, 1);

                    b.Property<string>("Biography")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("biography");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fullName");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit")
                        .HasColumnName("isOnline");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("photo");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("userName");

                    b.Property<string>("Website")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("website");

                    b.HasKey("PkUser");

                    b.ToTable("sUser");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Comment", b =>
                {
                    b.HasOne("CoinverseSocialAPI.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("FkPost")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoinverseSocialAPI.Models.UserModel", "User")
                        .WithMany("Comments")
                        .HasForeignKey("FkUser")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Follower", b =>
                {
                    b.HasOne("CoinverseSocialAPI.Models.UserModel", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FkFollower")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoinverseSocialAPI.Models.UserModel", "User")
                        .WithMany("Followers")
                        .HasForeignKey("FkUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FollowerUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Like", b =>
                {
                    b.HasOne("CoinverseSocialAPI.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("FkPost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinverseSocialAPI.Models.cTypeLike", "TypeLike")
                        .WithMany("Likes")
                        .HasForeignKey("FkTypeLike")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CoinverseSocialAPI.Models.UserModel", "User")
                        .WithMany("Likes")
                        .HasForeignKey("FkUser")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("TypeLike");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Post", b =>
                {
                    b.HasOne("CoinverseSocialAPI.Models.cTypePost", "TypePost")
                        .WithMany("Posts")
                        .HasForeignKey("FkTypePost")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoinverseSocialAPI.Models.UserModel", "User")
                        .WithMany("Posts")
                        .HasForeignKey("FkUser")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CoinverseSocialAPI.Models.Post", "SharedPost")
                        .WithMany()
                        .HasForeignKey("IdPostShared")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SharedPost");

                    b.Navigation("TypePost");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.cTypeLike", b =>
                {
                    b.Navigation("Likes");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.cTypePost", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("CoinverseSocialAPI.Models.UserModel", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Likes");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
